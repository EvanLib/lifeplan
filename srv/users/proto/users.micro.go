// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/users.proto

/*
Package users is a generated protocol buffer package.

It is generated from these files:
	proto/users.proto

It has these top-level messages:
	User
	Request
	UserResponse
	Token
	Error
*/
package users

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Users service

type UsersService interface {
	Create(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	Get(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error)
	GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*UserResponse, error)
	Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error)
	ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error)
}

type usersService struct {
	c    client.Client
	name string
}

func NewUsersService(name string, c client.Client) UsersService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "users"
	}
	return &usersService{
		c:    c,
		name: name,
	}
}

func (c *usersService) Create(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.Create", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) Get(ctx context.Context, in *User, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.Get", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) GetAll(ctx context.Context, in *Request, opts ...client.CallOption) (*UserResponse, error) {
	req := c.c.NewRequest(c.name, "Users.GetAll", in)
	out := new(UserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) Auth(ctx context.Context, in *User, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Users.Auth", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *usersService) ValidateToken(ctx context.Context, in *Token, opts ...client.CallOption) (*Token, error) {
	req := c.c.NewRequest(c.name, "Users.ValidateToken", in)
	out := new(Token)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Users service

type UsersHandler interface {
	Create(context.Context, *User, *UserResponse) error
	Get(context.Context, *User, *UserResponse) error
	GetAll(context.Context, *Request, *UserResponse) error
	Auth(context.Context, *User, *Token) error
	ValidateToken(context.Context, *Token, *Token) error
}

func RegisterUsersHandler(s server.Server, hdlr UsersHandler, opts ...server.HandlerOption) error {
	type users interface {
		Create(ctx context.Context, in *User, out *UserResponse) error
		Get(ctx context.Context, in *User, out *UserResponse) error
		GetAll(ctx context.Context, in *Request, out *UserResponse) error
		Auth(ctx context.Context, in *User, out *Token) error
		ValidateToken(ctx context.Context, in *Token, out *Token) error
	}
	type Users struct {
		users
	}
	h := &usersHandler{hdlr}
	return s.Handle(s.NewHandler(&Users{h}, opts...))
}

type usersHandler struct {
	UsersHandler
}

func (h *usersHandler) Create(ctx context.Context, in *User, out *UserResponse) error {
	return h.UsersHandler.Create(ctx, in, out)
}

func (h *usersHandler) Get(ctx context.Context, in *User, out *UserResponse) error {
	return h.UsersHandler.Get(ctx, in, out)
}

func (h *usersHandler) GetAll(ctx context.Context, in *Request, out *UserResponse) error {
	return h.UsersHandler.GetAll(ctx, in, out)
}

func (h *usersHandler) Auth(ctx context.Context, in *User, out *Token) error {
	return h.UsersHandler.Auth(ctx, in, out)
}

func (h *usersHandler) ValidateToken(ctx context.Context, in *Token, out *Token) error {
	return h.UsersHandler.ValidateToken(ctx, in, out)
}
